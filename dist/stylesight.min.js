"use strict";const degToRad=x=>x*Math.PI/180,getVideoFeed=video=>new Promise(resolve=>{let getVideoFeedAttempts=0,errMessage="There was an error accessing the camera.";/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream&&(errMessage+=" iOS might still have no support for camera API."),location.protocol.startsWith("https")||(errMessage+=" Please make sure you are using https.");try{if("mozGetUserMedia"in navigator)navigator.mozGetUserMedia({audio:!1,video:{facingMode:"environment"}},stream=>{video.srcObject=stream,resolve()},err=>{console.log(err),alert(errMessage)});else{if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"environment"}}).then(stream=>{video.srcObject=stream,resolve()}).catch(err=>{console.log(err),++getVideoFeedAttempts<3?getVideoFeed():alert(errMessage)});else{const getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;getUserMedia?getUserMedia({audio:!1,video:{facingMode:"environment"}},stream=>{video.srcObject=stream,resolve()},err=>{console.log(err),alert(errMessage)}):alert("Camera not available")}}}catch(e){alert(errMessage)}});window.addEventListener("load",async()=>{document.querySelector(".toggle").addEventListener("click",()=>controls.classList.toggle("open"));let activeStyle="none";const styles=[{id:"none",name:"None"},{id:"udnie",name:"Udnie"},{id:"rain_princess",name:"Rain princess"},{id:"scream",name:"Scream"},{id:"la_muse",name:"La muse"},{id:"wave",name:"Wave"},{id:"wreck",name:"Wreck"}];Net.styles=styles,Net.activeStyle=styles[0],styles.forEach(style=>{let img;const{id:id,name:name}=style,styleDiv=document.createElement("div");styleDiv.className="style";const label=document.createElement("span");label.innerHTML=name;const loadingContainer=document.createElement("div");loadingContainer.className="loadingContainer";const spinner=document.createElement("div");spinner.className="spinner";const loadingNote=document.createElement("span");loadingNote.className="loadingNote",loadingNote.innerHTML="Loading...","none"==id?label.style.width="150px":((img=document.createElement("img")).onload=(()=>loadingContainer.style.width=img.width+20+"px"),img.src=`./images/${id}.jpg`,styleDiv.appendChild(img),loadingContainer.appendChild(spinner),styleDiv.appendChild(loadingContainer),styleDiv.appendChild(loadingNote)),styleDiv.appendChild(label),stylesContainer.appendChild(styleDiv),styleDiv.addEventListener("click",async()=>{if(activeStyle!=id){if(activeStyle=id,Net.activeStyle.hasTexture=!1,Net.activeStyle.styleBox&&(Net.activeStyle.styleBox.visible=!1),Net.activeStyle=style,"none"==id)makeBoxObject();else if(makeBoxObject(100),!style.model){loadingNote.style.display="block",spinner.style.display="block",img.style.opacity=.5;const model=await Net.loadStyle(id,(done,total)=>loadingNote.innerHTML=`Loading... ${done}/${total}`);spinner.remove(),loadingNote.remove(),img.style.opacity=1,requestAnimationFrame(()=>{style.model=model})}console.log("activeStyle",activeStyle)}})});const renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0});renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(renderer.domElement),renderer.domElement.style.backgroundColor="black";let vrDisplay,effect=new THREE.VREffect(renderer);effect.separation=0,effect.setSize(window.innerWidth,window.innerHeight),navigator.getVRDisplays&&navigator.getVRDisplays().then(displays=>displays.length&&(vrDisplay=displays[0])),enterVRButton.addEventListener("click",()=>{const controls=document.getElementById("controls");enterVRButton.classList.contains("small")?((effect=new THREE.VREffect(renderer)).separation=0,effect.setSize(window.innerWidth,window.innerHeight),enterVRButton.classList.remove("small"),controls.classList.remove("hidden")):(navigator.userAgent.includes("Mobile VR")?vrDisplay.requestPresent([{source:renderer.domElement}]):((effect=new THREE.StereoEffect(renderer)).separation=0,effect.setSize(window.innerWidth,window.innerHeight)),enterVRButton.classList.add("small"),controls.classList.add("hidden"))});const scene=new THREE.Scene;let boxMaterial,texture,box,styleMaterial,styleTexture,styleBox,camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,1e3);scene.add(camera);const inferenceCanvas=document.createElement("canvas");let inferenceContext=inferenceCanvas.getContext("2d");window.video=document.createElement("video"),video.autoplay=!0,video.width=window.innerWidth,video.height=window.innerHeight,await getVideoFeed(video);const makeBoxObject=async height=>{window.video=document.createElement("video"),video.autoplay=!0,video.width=window.innerWidth,video.height=window.innerHeight,inferenceCanvas.height=height,inferenceCanvas.width=video.width/video.height*height,inferenceContext=inferenceCanvas.getContext("2d"),await getVideoFeed(video);const boxWidth=video.width,boxHeight=video.height,boxGeometry=new THREE.BoxGeometry(boxWidth,boxHeight,1);(texture=new THREE.Texture(video)).minFilter=THREE.NearestFilter,boxMaterial=new THREE.ShaderMaterial({uniforms:{texture:{type:"t",value:texture}},vertexShader:vertexShaderSource.text,fragmentShader:Net.getVideoShader()}),box=new THREE.Mesh(boxGeometry,boxMaterial),scene.add(box),camera.position.z=.5*boxWidth*Math.atan(degToRad(55))+100};window.inferring=!0;const multScalar=tf.scalar(255),render=async()=>{if(video.currentTime&&(texture.needsUpdate=!0,styleTexture&&(styleTexture.needsUpdate=!0)),!inferring&&"none"!=Net.activeStyle&&"none"!=Net.activeStyle&&Net.activeStyle.hasOwnProperty("model")){console.log("inferring"),inferring=!0,inferenceContext.drawImage(video,0,0,inferenceCanvas.width,inferenceCanvas.height);const result=tf.tidy(()=>{const preprocessed=tf.fromPixels(inferenceCanvas),inferenceResult=Net.predict(preprocessed);return preprocessed.dispose(),inferenceResult});result.mul(multScalar);const total=result.shape[0]*result.shape[1],data=await result.data(),rgbaData=new Uint8Array(4*total);for(let i=0;i<total;i++)rgbaData[4*i+0]=data[3*i+0],rgbaData[4*i+1]=data[3*i+1],rgbaData[4*i+2]=data[3*i+2],rgbaData[4*i+3]=255;if(Net.activeStyle.hasOwnProperty("hasTexture")&&Net.activeStyle.hasTexture)styleTexture.image.data=rgbaData;else{const styleGeometry=new THREE.BoxGeometry(video.width,video.height,1);(styleTexture=new THREE.DataTexture(rgbaData,result.shape[1],result.shape[0],THREE.RGBAFormat,THREE.UnsignedByteType)).flipY=!0,styleTexture.minFilter=THREE.NearestFilter,styleMaterial=new THREE.ShaderMaterial({transparent:!0,uniforms:{texture:{type:"t",value:styleTexture},width:{type:"f",value:video.width},height:{type:"f",value:video.height},radius:{type:"f",value:.4},intensity:{type:"f",value:1}},vertexShader:vertexShaderSource.text,fragmentShader:Net.compileShader()}),styleBox=new THREE.Mesh(styleGeometry,styleMaterial),window.styleBox=styleBox,window.styleTexture=styleTexture,Net.activeStyle.hasTexture=!0,Net.activeStyle.styleBox=styleBox,scene.add(styleBox)}styleTexture.needsUpdate=!0,result.dispose(),await tf.nextFrame(),setTimeout(()=>inferring=!1,10)}"none"==Net.activeStyle&&styleBox&&(styleBox.visible=!1),effect.render(scene,camera),requestAnimationFrame(render)};makeBoxObject(),render(),window.video.onloadedmetadata=(()=>inferring=!1),window.location.href.includes("localhost")||renderer.domElement.addEventListener("click",()=>{document.fullscreenEnabled&&renderer.domElement.requestFullScreen()||document.webkitFullscreenEnabled&&renderer.domElement.webkitRequestFullScreen()||document.mozFullScreenEnabled&&renderer.domElement.mozRequestFullScreen()||document.msFullScreenEnabled&&renderer.domElement.msRequestFullScreen()}),window.addEventListener("resize",()=>{effect.setSize(window.innerWidth,window.innerHeight),camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),scene.remove(box),video.pause(),makeBoxObject()})});const ckptsDir=document.URL.substr(0,document.URL.lastIndexOf("/"))+"/ckpts/";class Net{static loadStyle(id,callback){let checkpointManifest,vs={};const getVariable=name=>new Promise(resolve=>{fetch(ckptsDir+id+"/"+name).then(r=>r.arrayBuffer()).then(values=>{values=new Float32Array(values),resolve(tf.Tensor.make(checkpointManifest[name].shape,{values:values}))})});return new Promise(resolve=>{fetch(ckptsDir+id+"/manifest.json").then(r=>r.json()).then(manifest=>{checkpointManifest=manifest;const variableNames=Object.keys(checkpointManifest),variablePromises=variableNames.map(getVariable);if(callback){let donePromises=0;variablePromises.forEach(p=>p.then(()=>callback(++donePromises,variablePromises.length)))}Promise.all(variablePromises).then(variables=>{variables.forEach((val,vi)=>{vs[variableNames[vi]]=val}),resolve(vs)})})})}static predict(preprocessedInput){preprocessedInput.dtype="float32";const conv1=this.convLayer(preprocessedInput,1,!0,0),conv2=this.convLayer(conv1,2,!0,3),conv3=this.convLayer(conv2,2,!0,6),resid1=this.residualBlock(conv3,9),resid2=this.residualBlock(resid1,15),resid3=this.residualBlock(resid2,21),resid4=this.residualBlock(resid3,27),resid5=this.residualBlock(resid4,33),convT1=this.convTransposeLayer(resid5,64,2,39),convT2=this.convTransposeLayer(convT1,32,2,42),convT3=this.convLayer(convT2,1,!1,45),outTanh=tf.tanh(convT3),scaled=tf.mul(tf.scalar(150),outTanh),shifted=tf.add(tf.scalar(127.5),scaled),clamped=tf.clipByValue(shifted,0,255);return clamped}static convLayer(input,strides,relu,varId){const y=tf.conv2d(input,this.activeStyle.model[this.varName(varId)],1,strides),y2=this.instanceNorm(y,varId+1);return relu?tf.relu(y2):y2}static convTransposeLayer(input,numFilters,strides,varId){const[height,width]=input.shape,newShape=[height*strides,width*strides,numFilters],y=tf.conv2dTranspose(input,this.activeStyle.model[this.varName(varId)],newShape,strides,"same"),y2=this.instanceNorm(y,varId+1);return tf.relu(y2)}static residualBlock(input,varId){const conv1=this.convLayer(input,1,!0,varId),conv2=this.convLayer(conv1,1,!1,varId+3);return tf.addStrict(conv2,input)}static instanceNorm(input,varId){const[height,width,inDepth]=input.shape,moments=tf.moments(input,[0,1]),mu=moments.mean,sigmaSq=moments.variance,shift=this.activeStyle.model[this.varName(varId)],scale=this.activeStyle.model[this.varName(varId+1)],normalized=tf.div(tf.sub(input,mu),tf.sqrt(tf.add(sigmaSq,tf.scalar(.001))));return tf.add(tf.mul(scale,normalized),shift).as3D(height,width,inDepth)}static varName(varId){return 0===varId?"Variable":"Variable_"+varId.toString()}static getVideoShader(){return"\n            uniform sampler2D texture;\n            varying vec2 vUv;\n\n            void main() {\n                gl_FragColor = texture2D(texture, vUv);\n            }\n        "}static compileShader(){return`\n            uniform sampler2D texture;\n            uniform float width;\n            uniform float height;\n            uniform float radius;\n            uniform float intensity;\n            uniform vec2 resolution;\n            varying vec2 vUv;\n\n            float rand(vec2 co){\n                return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n            }\n\n            void main() {\n\n                float w = 1.0 / width;\n                float h = 1.0 / height;\n\n                vec4 pixel = texture2D(texture, vUv);\n\n                // if (sqrt( (0.5 - vUv[0])*(0.5 - vUv[0]) + (0.5 - vUv[1])*(0.5 - vUv[1]) ) < radius) {\n\n                //     // ${this[name+"Body"]}\n                //     vec4 newColour = vec4(pixel.rgb, 1.0);\n\n                //     gl_FragColor = newColour*(1.0-intensity) + pixel*intensity;\n\n                // } else {\n                //     gl_FragColor = vec4(pixel.rgb, 1.0);\n                // }\n\n                gl_FragColor.a = 1.0;\n                gl_FragColor.rgb = pixel.rgb;\n                gl_FragColor = pixel;\n            }\n        `}}
//# sourceMappingURL=stylesight.min.js.map